from ctypes import *
from ctypes.util import find_library
from enum import IntEnum
import os
import sysconfig
import platform

def configure_lib_path():
    lib_dir = os.path.join(sysconfig.get_path('data'), 'lib')
    system = platform.system()
    if system == "Linux":
        env_var = "LD_LIBRARY_PATH"
    elif system == "Darwin":
        env_var = "DYLD_LIBRARY_PATH"
    elif system == "Windows":
        env_var = "PATH"
    else:
        raise RuntimeError(f"Unsupported platform: {system}")

    lib_dir = os.path.abspath(lib_dir)
    existing_path = os.environ.get(env_var, "")
    os.environ[env_var] = f"{lib_dir}{os.pathsep}{existing_path}"
    return lib_dir

isl_library_path = find_library("isl")
if isl_library_path is None:
  lib_dir = configure_lib_path()
  isl_library_path = os.path.join(lib_dir, find_library("isl"))
isl = cdll.LoadLibrary(isl_library_path)
assert isl is not None, "can't find the isl shared library!"
libc = cdll.LoadLibrary(find_library("c"))

class format(IntEnum):
  ISL = 0
  POLYLIB = 1
  POLYLIB_CONSTRAINTS = 2
  OMEGA = 3
  C = 4
  LATEX = 5
  EXT_POLYLIB = 6

class yaml_style(IntEnum):
  BLOCK = 0
  FLOW = 1

class dim_type(IntEnum):
	CST = 0
	PARAM = 1
	IN = 2
	OUT = 3
	SET = 3
	DIV = 4
	ALL = 5

class ast_expr_type(IntEnum):
  ERROR = -1
  OP = 0
  ID = 1
  INT = 2

class ast_expr_op_type(IntEnum):
  ERROR = -1
  AND = 0
  AND_THEN = 1
  OR = 2
  OR_ELSE = 3
  MAX = 4
  MIN = 5
  MINUS = 6
  ADD = 7
  SUB = 8
  MUL = 9
  DIV = 10
  FDIV_Q = 11
  PDIV_Q = 12
  PDIV_R = 13
  ZDIV_R = 14
  COND = 15
  SELECT = 16
  EQ = 17
  LE = 18
  LT = 19
  GE = 20
  GT = 21
  CALL = 22
  ACCESS = 23
  MEMBER = 24
  ADDRESS_OF = 25

class Error(Exception):
    pass

class Context:
    defaultInstance = None

    def __init__(self):
        ptr = isl.isl_ctx_alloc()
        self.ptr = ptr

    def __del__(self):
        isl.isl_ctx_free(self)

    def from_param(self):
        return c_void_p(self.ptr)

    @staticmethod
    def getDefaultInstance():
        if Context.defaultInstance == None:
            Context.defaultInstance = Context()
        return Context.defaultInstance

    @CFUNCTYPE(None, py_object)
    def free_user(user):
        pythonapi.Py_DecRef(py_object(user))

isl.isl_ctx_alloc.restype = c_void_p
isl.isl_ctx_free.argtypes = [Context]
isl.isl_id_alloc.restype = c_void_p
isl.isl_id_alloc.argtypes = [Context, c_char_p, py_object]
isl.isl_id_set_free_user.restype = c_void_p
isl.isl_id_set_free_user.argtypes = [c_void_p, c_void_p]
isl.isl_id_get_free_user.restype = c_void_p
isl.isl_id_get_free_user.argtypes = [c_void_p]
isl.isl_id_get_user.restype = py_object
isl.isl_id_get_user.argtypes = [c_void_p]
